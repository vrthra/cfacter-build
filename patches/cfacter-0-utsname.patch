diff --git a/lib/inc/facter/facts/posix/kernel_resolver.hpp b/lib/inc/facter/facts/posix/kernel_resolver.hpp
index 7256d8b..c88a5d4 100644
--- a/lib/inc/facter/facts/posix/kernel_resolver.hpp
+++ b/lib/inc/facter/facts/posix/kernel_resolver.hpp
@@ -31,13 +31,13 @@ namespace facter { namespace facts { namespace posix {
          * @param facts The fact collection that is resolving facts.
          * @param name The result of the uname call.
          */
-        virtual void resolve_kernel(collection& facts, utsname const& name);
+        virtual void resolve_kernel(collection& facts, struct utsname const& name);
         /**
          * Called to resolve the kernel release fact.
          * @param facts The fact collection that is resolving facts.
          * @param name The result of the uname call.
          */
-        virtual void resolve_kernel_release(collection& facts, utsname const& name);
+        virtual void resolve_kernel_release(collection& facts, struct utsname const& name);
         /**
          * Called to resolve the kernel version fact.
          * @param facts The fact collection that is resolving facts.
diff --git a/lib/inc/facter/facts/posix/processor_resolver.hpp b/lib/inc/facter/facts/posix/processor_resolver.hpp
index 32c47fa..2fabe6d 100644
--- a/lib/inc/facter/facts/posix/processor_resolver.hpp
+++ b/lib/inc/facter/facts/posix/processor_resolver.hpp
@@ -31,13 +31,13 @@ namespace facter { namespace facts { namespace posix {
          * @param facts The fact collection that is resolving facts.
          * @param name The result of the uname call.
          */
-        virtual void resolve_hardware_isa(collection& facts, utsname const& name);
+        virtual void resolve_hardware_isa(collection& facts, struct utsname const& name);
         /**
          * Called to resolve the hardware model fact.
          * @param facts The fact collection that is resolving facts.
          * @param name The result of the uname call.
          */
-        virtual void resolve_hardware_model(collection& facts, utsname const& name);
+        virtual void resolve_hardware_model(collection& facts, struct utsname const& name);
         /**
          * Called to resolve the hardware architecture fact.
          * @param facts The fact collection that is resolving facts.
diff --git a/lib/src/facts/posix/kernel_resolver.cc b/lib/src/facts/posix/kernel_resolver.cc
index 070e1bc..1244bfc 100644
--- a/lib/src/facts/posix/kernel_resolver.cc
+++ b/lib/src/facts/posix/kernel_resolver.cc
@@ -27,7 +27,7 @@ namespace facter { namespace facts { namespace posix {
 
     void kernel_resolver::resolve_facts(collection& facts)
     {
-        utsname name;
+        struct utsname name;
         memset(&name, 0, sizeof(name));
         if (uname(&name) != 0) {
             LOG_WARNING("uname failed: %1% (%2%): kernel facts are unavailable.", strerror(errno), errno);
@@ -40,7 +40,7 @@ namespace facter { namespace facts { namespace posix {
         resolve_kernel_major_version(facts);
     }
 
-    void kernel_resolver::resolve_kernel(collection& facts, utsname const& name)
+    void kernel_resolver::resolve_kernel(collection& facts, struct utsname const& name)
     {
         string value = name.sysname;
         if (value.empty()) {
@@ -49,7 +49,7 @@ namespace facter { namespace facts { namespace posix {
         facts.add(fact::kernel, make_value<string_value>(move(value)));
     }
 
-    void kernel_resolver::resolve_kernel_release(collection& facts, utsname const& name)
+    void kernel_resolver::resolve_kernel_release(collection& facts, struct utsname const& name)
     {
         string value = name.release;
         if (value.empty()) {
diff --git a/lib/src/facts/posix/processor_resolver.cc b/lib/src/facts/posix/processor_resolver.cc
index e5e6b63..5400f6a 100644
--- a/lib/src/facts/posix/processor_resolver.cc
+++ b/lib/src/facts/posix/processor_resolver.cc
@@ -35,7 +35,7 @@ namespace facter { namespace facts { namespace posix {
     void processor_resolver::resolve_facts(collection& facts)
     {
         // Resolve the hardware related facts
-        utsname name;
+        struct utsname name;
         memset(&name, 0, sizeof(name));
         if (uname(&name) != 0) {
             LOG_WARNING("uname failed: %1% (%2%): %3% and %4% facts are unavailable.", strerror(errno), errno, fact::hardware_isa, fact::hardware_model);
@@ -54,9 +54,9 @@ namespace facter { namespace facts { namespace posix {
         resolve_processors(facts);
     }
 
-    void processor_resolver::resolve_hardware_isa(collection& facts, utsname const& name)
+    void processor_resolver::resolve_hardware_isa(collection& facts, struct utsname const& name)
     {
-        // The utsname struct doesn't have a member for "uname -p", so we need to execute
+        // The struct utsname struct doesn't have a member for "uname -p", so we need to execute
         auto result = execute("uname", { "-p" });
         if (!result.first || result.second.empty()) {
             return;
@@ -64,7 +64,7 @@ namespace facter { namespace facts { namespace posix {
         facts.add(fact::hardware_isa, make_value<string_value>(move(result.second)));
     }
 
-    void processor_resolver::resolve_hardware_model(collection& facts, utsname const& name)
+    void processor_resolver::resolve_hardware_model(collection& facts, struct utsname const& name)
     {
         // There is a corresponding field for "uname -m", so use it
         string value = name.machine;
